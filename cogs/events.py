import discord
from discord.ext import commands
import sqlite3
import random
from datetime import datetime, timedelta
import asyncio

class Events(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.event_types = [
            {
                "name": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä—É–ø—Ü–∏—è",
                "description": "–í –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã. –¢—Ä–µ–±—É—é—Ç—Å—è —Å—Ä–æ—á–Ω—ã–µ –º–µ—Ä—ã!",
                "icon": "üïµÔ∏è",
                "options": [
                    {"text": "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "effect": -200, "desc": "–î–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–µ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "modifier": {"type": "cost_reduction", "value": 0.1, "duration_hours": 24, "description": "–ê–Ω—Ç–∏–∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä—ã (-10% –∫ —Ä–∞—Å—Ö–æ–¥–∞–º)"}},
                    {"text": "–ó–∞–º—è—Ç—å –¥–µ–ª–æ", "effect": -500, "desc": "–ü–æ—Ç–µ—Ä—è –¥–æ–≤–µ—Ä–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è", "modifier": {"type": "income_multiplier", "value": 0.8, "duration_hours": 6, "description": "–°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è (-20% –∫ –¥–æ—Ö–æ–¥–∞–º)"}},
                    {"text": "–ü—É–±–ª–∏—á–Ω–æ–µ –æ—Å—É–∂–¥–µ–Ω–∏–µ", "effect": -100, "desc": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏"}
                ]
            },
            {
                "name": "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –Ω–∞–ª–æ–≥–æ–≤",
                "description": "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Å–µ–∑–æ–Ω –ø—Ä–∏–Ω–µ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è!",
                "icon": "üéâ",
                "options": [
                    {"text": "–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É", "effect": 300, "desc": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"},
                    {"text": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ä–µ–∑–µ—Ä–≤–µ", "effect": 500, "desc": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∑–Ω—ã"},
                    {"text": "–†–∞–∑–¥–∞—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—é", "effect": 200, "desc": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"}
                ]
            },
            {
                "name": "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
                "description": "–í —Å—Ç—Ä–∞–Ω–µ –Ω–∞—á–∞–ª–∏—Å—å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ª–Ω–µ–Ω–∏—è. –≠–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π!",
                "icon": "‚ö°",
                "options": [
                    {"text": "–í–≤–µ—Å—Ç–∏ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", "effect": -300, "desc": "–î–æ—Ä–æ–≥–∏–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"},
                    {"text": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", "effect": -150, "desc": "–î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ"},
                    {"text": "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", "effect": -400, "desc": "–°–∏—Ç—É–∞—Ü–∏—è —É—Ö—É–¥—à–∞–µ—Ç—Å—è"}
                ]
            },
            {
                "name": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –û–û–ù",
                "description": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–º–æ—â—å!",
                "icon": "üåç",
                "options": [
                    {"text": "–ü—Ä–∏–Ω—è—Ç—å –ø–æ–º–æ—â—å", "effect": 600, "desc": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"},
                    {"text": "–ü—Ä–∏–Ω—è—Ç—å —Å —É—Å–ª–æ–≤–∏—è–º–∏", "effect": 400, "desc": "–ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–æ–º–æ—â—å"},
                    {"text": "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", "effect": 100, "desc": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"}
                ]
            },
            {
                "name": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ä—ã–≤",
                "description": "–ú–µ—Å—Ç–Ω—ã–µ —É—á–µ–Ω—ã–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –≤–∞–∂–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ!",
                "icon": "üî¨",
                "options": [
                    {"text": "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "effect": 800, "desc": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –≤—ã–≥–æ–¥–∞"},
                    {"text": "–ü—Ä–æ–¥–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é", "effect": 400, "desc": "–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–∏–±—ã–ª—å"},
                    {"text": "–ó–∞—Å–µ–∫—Ä–µ—Ç–∏—Ç—å", "effect": 200, "desc": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ"}
                ]
            },
            {
                "name": "–ü—Ä–∏—Ä–æ–¥–Ω–∞—è –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞",
                "description": "–°—Ç–∏—Ö–∏–π–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ –Ω–∞–Ω–µ—Å–ª–æ —É—â–µ—Ä–± —ç–∫–æ–Ω–æ–º–∏–∫–µ!",
                "icon": "üå™Ô∏è",
                "options": [
                    {"text": "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "effect": -400, "desc": "–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"},
                    {"text": "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "effect": -200, "desc": "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"},
                    {"text": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å", "effect": -600, "desc": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"}
                ]
            }
        ]
    
    @commands.slash_command(name="—Å–æ–±—ã—Ç–∏–µ", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ")
    async def event_command(self, ctx, force: bool = False):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""
        if force and not ctx.author.guild_permissions.administrator:
            await ctx.respond("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è!", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        conn = sqlite3.connect(self.bot.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT * FROM events WHERE guild_id = ? AND status = 'active' ORDER BY timestamp DESC LIMIT 1",
            (ctx.guild.id,)
        )
        
        active_event = cursor.fetchone()
        conn.close()
        
        if active_event and not force:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            event_id, guild_id, event_type, description, amount, status, timestamp = active_event
            
            embed = discord.Embed(
                title=f"üìã –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                description=f"**{event_type}**\n{description}",
                color=0xFFD700
            )
            embed.add_field(name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", value=timestamp)
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è")
            
            await ctx.respond(embed=embed)
        else:
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if force:
                await ctx.defer()
            
            await self.create_random_event(ctx.guild)
            
            if force:
                await ctx.followup.send("‚úÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
            else:
                await ctx.respond("‚úÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
    
    async def create_random_event(self, guild):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        event_data = random.choice(self.event_types)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(self.bot.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO events (guild_id, event_type, description, amount, status) VALUES (?, ?, ?, ?, ?)",
            (guild.id, event_data["name"], event_data["description"], 0, "active")
        )
        
        event_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        channel = self.bot.get_channel(self.bot.chart_channel_id)
        if not channel:
            return
        
        from utils.visualization import create_event_image
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è
        image_path = create_event_image(event_data['name'], event_data['description'], event_data['icon'])
        
        embed = discord.Embed(
            title=f"{event_data['icon']} {event_data['name']}",
            description="**–í–Ω–∏–º–∞–Ω–∏–µ! –ù–æ–≤–æ–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.",
            color=0xFF6B35
        )
        embed.set_footer(text=f"ID —Å–æ–±—ã—Ç–∏—è: {event_id} | –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ: 30 –º–∏–Ω—É—Ç")

        file = None
        if image_path:
            file = discord.File(image_path, filename="event.png")
            embed.set_image(url="attachment://event.png")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
        view = EventView(self.bot, event_id, event_data["options"])
        
        message = await channel.send(embed=embed, file=file, view=view)

        if image_path:
            import os
            os.remove(image_path)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        await self.auto_resolve_event(event_id, guild)
    
    async def auto_resolve_event(self, event_id, guild):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        conn = sqlite3.connect(self.bot.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT status FROM events WHERE id = ?",
            (event_id,)
        )
        
        result = cursor.fetchone()
        if result and result[0] == "active":
            # –°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ö–æ–¥
            cursor.execute(
                "UPDATE events SET status = 'auto_resolved' WHERE id = ?",
                (event_id,)
            )
            
            # –°–ª—É—á–∞–π–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
            penalty = random.randint(100, 300)
            await self.bot.spend_money(guild, penalty, "–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Ä–µ—à–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            channel = self.bot.get_channel(self.bot.chart_channel_id)
            if channel:
                embed = discord.Embed(
                    title="‚è∞ –°–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ",
                    description=f"–°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è. –®—Ç—Ä–∞—Ñ: {penalty} –º–æ–Ω–µ—Ç",
                    color=0xFF0000
                )
                await channel.send(embed=embed)
        
        conn.commit()
        conn.close()

class EventView(discord.ui.View):
    def __init__(self, bot, event_id, options):
        super().__init__(timeout=1800)  # 30 –º–∏–Ω—É—Ç
        self.bot = bot
        self.event_id = event_id
        self.options = options
        self.votes = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        for i, option in enumerate(options):
            button = EventButton(i, option)
            self.add_item(button)
    
    async def on_timeout(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞"""
        for item in self.children:
            item.disabled = True

class EventButton(discord.ui.Button):
    def __init__(self, option_id, option_data):
        super().__init__(
            style=discord.ButtonStyle.primary if option_data['effect'] >= 0 else discord.ButtonStyle.danger,
            label=option_data['text'],
            custom_id=f"event_option_{option_id}"
        )
        self.option_id = option_id
        self.option_data = option_data
        self.effect = option_data['effect']
        self.description = option_data['desc']
        self.votes = set()
    
    async def callback(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
        user_id = interaction.user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        for item in self.view.children:
            if isinstance(item, EventButton) and user_id in item.votes:
                item.votes.remove(user_id)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
        self.votes.add(user_id)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        embed = discord.Embed(
            title="üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ —Å–æ–±—ã—Ç–∏—é",
            description="–¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
            color=0x2F3136
        )
        
        total_votes = sum(len(item.votes) for item in self.view.children if isinstance(item, EventButton))
        
        for item in self.view.children:
            if isinstance(item, EventButton):
                vote_count = len(item.votes)
                percentage = (vote_count / total_votes * 100) if total_votes > 0 else 0
                
                embed.add_field(
                    name=f"{item.label} ({vote_count} –≥–æ–ª–æ—Å–æ–≤)",
                    value=f"{item.description}\n–≠—Ñ—Ñ–µ–∫—Ç: {item.effect:+} –º–æ–Ω–µ—Ç\n{percentage:.1f}%",
                    inline=False
                )
        
        await interaction.response.edit_message(embed=embed, view=self.view)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if interaction.user.guild_permissions.administrator:
            await self.apply_event_result(interaction)
    
    async def apply_event_result(self, interaction):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        max_votes = max(len(item.votes) for item in self.view.children if isinstance(item, EventButton))
        winning_options = [item for item in self.view.children 
                          if isinstance(item, EventButton) and len(item.votes) == max_votes]
        
        if len(winning_options) == 1:
            winner = winning_options[0]
        else:
            # –í —Å–ª—É—á–∞–µ –Ω–∏—á—å–µ–π –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
            winner = random.choice(winning_options)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        guild = interaction.guild
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if 'modifier' in winner.option_data:
            mod = winner.option_data['modifier']
            expires_at = datetime.now() + timedelta(hours=mod['duration_hours'])
            
            cursor.execute(
                "INSERT INTO modifiers (guild_id, modifier_type, value, description, expires_at) VALUES (?, ?, ?, ?, ?)",
                (guild.id, mod['type'], mod['value'], mod['description'], expires_at)
            )

        if winner.effect > 0:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
            conn = sqlite3.connect(self.view.bot.db_path)
            cursor = conn.cursor()
            
            current_treasury = await self.view.bot.get_treasury(guild)
            new_treasury = current_treasury + winner.effect
            
            cursor.execute(
                "INSERT INTO economy (guild_id, treasury) VALUES (?, ?)",
                (guild.id, new_treasury)
            )
            
            cursor.execute(
                "INSERT INTO transactions (guild_id, amount, description) VALUES (?, ?, ?)",
                (guild.id, winner.effect, f"–°–æ–±—ã—Ç–∏–µ: {winner.label}")
            )
            
            conn.commit()
            conn.close()
        else:
            # –¢—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥
            await self.view.bot.spend_money(guild, abs(winner.effect), f"–°–æ–±—ã—Ç–∏–µ: {winner.label}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è
        conn = sqlite3.connect(self.view.bot.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "UPDATE events SET status = 'resolved', amount = ? WHERE id = ?",
            (winner.effect, self.view.event_id)
        )
        
        conn.commit()
        conn.close()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        embed = discord.Embed(
            title="‚úÖ –°–æ–±—ã—Ç–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ",
            description=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: **{winner.label}**\n{winner.description}",
            color=0x00FF00 if winner.effect >= 0 else 0xFF0000
        )
        
        embed.add_field(
            name="–≠—Ñ—Ñ–µ–∫—Ç –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É",
            value=f"{winner.effect:+} –º–æ–Ω–µ—Ç",
            inline=True
        )
        
        current_treasury = await self.view.bot.get_treasury(guild)
        embed.add_field(
            name="–¢–µ–∫—É—â–∞—è –∫–∞–∑–Ω–∞",
            value=f"{current_treasury:,} –º–æ–Ω–µ—Ç",
            inline=True
        )
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        for item in self.view.children:
            item.disabled = True
        
        await interaction.edit_original_response(embed=embed, view=self.view)

def setup(bot):
    bot.add_cog(Events(bot))
